
// const str = `4186687989147999814661259829898977359647291819692699791589716697144967221276869433756649999295588871\n9579993679749288818462777979758389899855345699193951989579278675969459999771962775579518839338298959\n1894738811988829986939897965935486686617499991722996261993912481731199465919971986799399278712999782\n1798991999197599646882937687934577816793967249952136268979847913269346518916498238994739961511228199\n9435574999917188935889117454871237663681989719878743978685998643691852827889659294379989962189789397\n1287186485994768936859699815284782585998129781252852173994242594377218959522199456634287944896997477\n6871578685828444387466578691916461497421152984838997196971189849994217987462378568989112149961927162\n7768274969889132821379748891197337985999948668439879482957941547449986946969485998964739447974228199\n6119899848149845561175416892733976799153716987399849877688336359684788884925393779796985288168899689\n4996845932219644899659769779189949876689119199183768989763889857597819948719839521871979981993129997\n7971499518898381939993989968259841935786594299996668987418876241327929297499819168198774999935791789\n8989294919949989983962199991969649393768661242699997841129192918937761747992122625495987832497983839\n9193796854893698637899476297986944265798698814799938624992771227255589146257383921899989994776679887\n4334756645129733983199962473969489983391681896779948161888991958648992243799384951799484369968254197\n3897589718983888479499598486927599567991132535134176992998995528842653199838733759892691848919911965\n4679148996923438189941447789895191885899459228929969898955955149985546372179997888628657881619286194\n1937118887998986388482681782881457248688899158899789393499516488888462374326483236682998798615722853\n6195689398286838812371235192382116119318689749931893894699698728798112662462496988978199379898598866\n3598667272723491779627997242171698925739726186131177716968968996294417188885959345953827817132998916\n1519944142993199841941699294968698995369578867997917889486654246227818996739169669789783299682355389\n2218941499973319799449881275891614179598919311996995957544919198794848543979791884958959516939969219\n4969928867619586693815519699979837583397199899918239596989778919912718374562614761899323839812288883\n4855936491799949827125398889219996936966517688267989677877842817994535586775274925946999881433891957\n8286417898919511938725961691419591991718373621643197999428795392499517199181988921727949563179969937\n9799598842359999396315192721781796533395715957931195589679878962197894922584827998655919193882119747\n3596733995839917716256199122869916639699959191297487195198993981413883281881552818597499287994468921\n9949671259478897959558191915993198527179777513987286587968219695819717127199299999879994937372821471\n8249378982728396361285738518898489561395947793198621191918625935167998972944978648799726557998719965\n7619899787644498454282294163869114967398789836916526984791998996919139923399297147674389898585574776\n9111942711987883739917663118136911569869319778278994967178891769352338555498946169756877871931961982\n6954989628268695715489341165279919911929481331551514988377791678884689194626861899418189486988187196\n1819462714769811679339886649561184398943387381398374111893259263332462196663147969995978399985318239\n5937768118219191763293327629979394977197738665738899438171642995279694299219969159988395799597763668\n3291461484869889296977898298697429828289173149834423478945292182199415824177922916549799949953193879\n1938461244782856465297371494738596381799882745998197821555993687969996966286984128951579924456677666\n8886638972849948981279741919995595932462545197979478998888914891944269388691325898218761298944166847\n7769849843768975899579798663973882717917968179272968568988548353899829895969988942852739512849485839\n4919596981981199955396675779996973999115926318193769749858719429971435898898314541967918326262744692\n9428939863833456979949424997963112359568769457278772998214895922715716385828918118573181991931578573\n8919945114733399891857766867695887955299831314167987975798587699981852813182999668179217892885195717\n7829615636974128183729818178423852991286772241293984977736229951972653397977497982358118999979169527\n7678454168594951256517753759991589135985669199864949749979918888196592217499387199589133343552966949\n8119422818994191498579782647911968168369995353791886975894926897878195878273141879915185929899178913\n7812329158697789168971359189386971899579317149271996991878952964259175719498918358285996776631995878\n9798118835784749981579198674539868489483271923274791976877789892996338187898927994658982979997349969\n9477273878881877647882189728959299613586151139161966464289278681991998184686824768175919871511961966\n9919857379986667695988843749559544986945219991581945889944986929171111598994534999698186266698791899\n3364916489314919992195598739915711141128797962959982289869485229925786798316399838178937926382446575\n2912818892939859927197913851983396399515367773169977525919619892913778889736959997599938212997888999\n4269497115948499995519869489549197186338685988659588411268899899999195999277982898938479978149797899\n3138855298787916946189938289951966994893842399691932599386799774317826775321856863511339949735888591\n9733897918582559589982799938529959926219289553149439458798698918481698369293743899488672761241316887\n9619798992686999691852898789982336699137977478998561325989934554968868839199199849981989993956997737\n7814666463672918637235789938316749389166781969998932176878578551998868999959242799791163889899846618\n9752949893221898553499187799825682346799828142188861139653882938139928866836991245459863829858998188\n1294949935197948898211198819881821296119727851997212621698896779992584166151297999339447798989362865\n8857979499916691528235697973684821799598587795559197649942299182627691961754119479999397919999371999\n3639897596779561927789269443848789921551926711437415122732687969549143999812994994747148755956729799\n8189479699613591819419668445977548487918995489881996918529279195193653419211963279279488981196293619\n7769942161582739292291418918979238651767948597494938529498673335548793472916599629718619835683689798\n1443967882579519328556279988497355736822198149965929928867655364991863978624745431379799339814955462\n5927776538139999925395875739879971665969766377989855978985783316288891613911888192698992898496228999\n4498985971959196199898917257998721838949758577899699735618359619799765639325393752685931618839988982\n9271222993569417892936854989116919891916539499279699988988898912117194275188367347638899733999979479\n8949989981139499681975917393649688481934651921792679664191179486897183131928956968554995139981686389\n7962191923797875755447715827951379682855832437385839853577933144793497869981692875314354882519799553\n5128992922139559144923714752298595495672285988967293398448786911569199838943982999883117961297426499\n8887837819981395371469995591499812138687318489899589978711887586394316979829994752182888967999761941\n4893681718664157399988831419917865893379899824267999937689388942879969961988914852729672599794989919\n7312248188168819929919689984145998136999978866527958937869919995191889731964921422187913124158695483\n1995934118941529285329887951189939691994429296585739819181789891673771872761593319915593993359726869\n9178376188129495278157697583261964544798698662866449989548461168168994978883239965197992958259599417\n7663919381992298699792692185886119999619811741985984739951258951892913583767867857796887568417584593\n1297266781979951199991649899679929931554418138836998455744999971949192119966823664131889997645798969\n8232788388116981227918324519818347881696857569359958951859757893979496939319984967569346237349273857\n7238773794974819897958369992455877898617314138977999717721957364986479592853498471899729926854869798\n9878391892942689799673598628127189965914153991439798619189934269994189455718998379949117112176126989\n9973929724199999992691868979977851999589176846396911972898448289929187798994952812949496537671125959\n1999851559969582846994467995235249717871112937689273578288997999768999986918289729893872577599984999\n9639826949219419566648894893837467732548988641394718891963892129987789893997796988568119615849999292\n1789137499185696488578593116637776338811819819798897946799969999744936599977888992679598939814897239\n1898993919394812832691851739965989948599194617868799718436871959793778678152119469859885428989444875\n1928955817982693248957597176639577981934989444431377942375978689893966694969892673148697975965192967\n8939156599764959959624971858589817896299742515985991299629359293282898975995912994954899227188668259\n8347281993854997297951752467199916978618961316199881528383111998414679491485978958179782188115849599\n5153997217916411589639859739789296988862783439847938765879419419634265745421494282419788839588246771\n2498243979184715495742999998369689934798698692644248568728399838817475436568389586831934126588893791\n4269939791423799419849919851965159959197193319919446157531719199919647964852391954979787982752341889\n6888256495877821981959988897683657317979826991598259398399299894767999928935187864988998975719984713\n4516931875987991198444993999799912151866812927497985932581555999965919919896959219487969442855879795\n9117831286616618595952876951875959363319581619969847599913699789975737878813381279496799929179788952\n7155199582375177596239771834968736274537947828931257491992596349776938519629696192934989339917928959\n6154956939632968579969697178792319286739276642566898371421967928644337849993942923767955592861812737\n4953717561541462467713819911357819672328259763884449131189691872817494893258598965966394994368176862\n5798245473891383899999774482987686879993965686253893589656876299192799821792599679911948989319876219\n9663939886297395558994245189842687789786296421287286839148327197544259239498959126144988376992925925\n4854219729975244181379867291974957856869989846345783749989995133294615198981592844612926397559878688\n7392655881995888883398631561439948996957297196649154296958969899189769924689955593884962128277983469\n6697192855668444397469674996629985762592998746173742294384883989692259269891721199591851199192193737\n9994937637611891863444164899866981592248937698819756642199582891967599998156894879699913976933911189\n`
// const strings = str.trim().split('\n')

const strings = [
	'1163751742',
	'1381373672',
	'2136511328',
	'3694931569',
	'7463417111',
	'1319128137',
	'1359912421',
	'3125421639',
	'1293138521',
	'2311944581',
]

const Container = PIXI.Container,
    autoDetectRenderer = PIXI.autoDetectRenderer,
    Sprite = PIXI.Sprite,
    Graphics = PIXI.Graphics;

const app = new PIXI.Application(window.innerWidth, window.innerHeight, { antialias: true })
document.body.appendChild(app.view)

const stage = app.stage

app.renderer.autoResize = true
app.renderer.resize(window.innerWidth, window.innerHeight)
app.renderer.backgroundColor = 0x0f0f23

const width = strings[0].length
const height = strings.length

const rectWidth = x => x * (window.innerWidth / width)
const rectHeight = x => x * (window.innerHeight / height)

const grid = new Array(width).fill().map(x => {
	return new Array(height).fill().map(y => {
		return null
	})
})

strings.forEach((row, y) => {
	return row.split('').forEach((item, x) => {
		grid[x][y] = {
			cost: parseInt(item),
			best: null,
		}
	})
})

createPixiGrid()

function format(str) {
	if (!str) return '.'
	return `|${str}|`
}

function printGrid() {
	let str = ''
	for (var y = 0; y < height; y++) {
		for (var x = 0; x < width; x++) {
			const best = grid[x][y].best
			const sum = best && best.sum
			str += format(sum)
		}
		str += '\n\n'
	}
	return str
}

function createPixiGrid() {
	for (let y = 0; y < height; y++) {
		for (let x = 0; x < width; x++) {
			const squareContainer = new Container()
			squareContainer.position.x = rectWidth(x)
			squareContainer.position.y = rectHeight(y)
			stage.addChild(squareContainer)

			const graphics = new PIXI.Graphics()
			graphics.beginFill(0xFFFF00)
			graphics.lineStyle(5, 0xFF0000)
			graphics.drawRect(0, 0, rectWidth(1), rectHeight(1))
			squareContainer.addChild(graphics)

			const costText = new PIXI.Text(grid[x][y].cost, { fontFamily : 'Arial', fontSize: 10, fill : 0xff1010, align : 'center'})
			costText.position.x = 5
			costText.position.y = 5
			squareContainer.addChild(costText)

			const sumText = new PIXI.Text('-', { fontFamily : 'Arial', fontSize: 24, fill : 0xff1010, align : 'center'})
			sumText.position.x = 30
			sumText.position.y = 40
			app.ticker.add(() => {
				if (grid[x][y].best && grid[x][y].best.sum) {
					sumText.text = grid[x][y].best.sum
				} else {
					sumText.text = '.'
				}
			})
			squareContainer.addChild(sumText)
		}		
	}
}

grid[0][0] = {
	cost: 1,
	best: {
		path: [],
		sum: 1
	}
}

function apply(direction, _coordinate) {
	return {
		x: _coordinate.x + coordinate[direction].x,
		y: _coordinate.y + coordinate[direction].y
	}
}

const coordinate = {
	north: { x: 0, y: -1 },
	south: { x: 0, y: 1 },
	west: { x: -1, y: 0 },
	east: { x: 1, y: 0 },
}

function findNull() {
	for (let x = 0; x < width; x++) {
		for (let y = 0; y < height; y++) {
			const origin = grid[x][y]
			for (let i = 0; i <= 3; i++) {
				const direction = x > y ? ['south', 'east', 'west', 'north'][i] : ['east', 'south', 'west', 'north'][i]
				const test = apply(direction, { x, y })
				const target = grid[test.x] && grid[test.x][test.y]
				if (target && target.best) {				
					if (origin.best.sum + target.cost < target.best.sum) {
						grid[test.x][test.y] = {
							cost: target.cost,
							best: {
								sum: origin.best.sum + target.cost,
								path: origin.best.path.concat({ x, y })
							}
						}
						return false
					}					
				} else if (target) {
					grid[test.x][test.y] = {
						cost: target.cost,
						best: {
							sum: origin.best.sum + target.cost,
							path: origin.best.path.concat({ x, y })
						}
					}
					return false
				}				
			}
		}
	}
	return true
}

window.addEventListener('keydown', e => {
	if (e.keyCode === 13) {
		grid[3][3].cost = 1
	} else {
		findNull()
	}
})

// console.log(grid[width-1][height-1].best.path)
